/********************************************************************************
 * Copyright (c) 2023 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/

import ElkConstructor from 'elkjs/lib/elk-api';
import {
    createDefaultModule, createDefaultSharedModule, DefaultSharedModuleContext, inject,
    LangiumServices, Module, PartialLangiumServices
} from 'langium';
import { LangiumSprottySharedServices, SprottyDiagramServices, SprottySharedModule } from 'langium-sprotty';
import { ElkLayoutEngine } from 'sprotty-elk';
import { DefaultElementFilter, ElkFactory, IElementFilter, ILayoutConfigurator } from 'sprotty-elk/lib/inversify';
import { StatesDiagramGenerator } from './diagram-generator';
import { StatemachineGeneratedModule, StatemachineGeneratedSharedModule } from './generated/module';
import { StatesLayoutConfigurator } from './layout-config';
import { registerValidationChecks, StatemachineValidator } from './statemachine-validator';

/**
 * Declaration of custom services - add your own service classes here.
 */
export type StatemachineAddedServices = {
    validation: {
        StatemachineValidator: StatemachineValidator
    },
    layout: {
        ElkFactory: ElkFactory,
        ElementFilter: IElementFilter,
        LayoutConfigurator: ILayoutConfigurator
    }
}

/**
 * Union of Langium default services and your custom services - use this as constructor parameter
 * of custom service classes.
 */
export type StatemachineServices = LangiumServices & StatemachineAddedServices

/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. The Langium defaults can be partially specified to override only
 * selected services, while the custom services must be fully specified.
 */
export const StatemachineModule: Module<StatemachineServices, SprottyDiagramServices & StatemachineAddedServices> = {
    diagram: {
        DiagramGenerator: services => new StatesDiagramGenerator(services),
        ModelLayoutEngine: services => new ElkLayoutEngine(services.layout.ElkFactory, services.layout.ElementFilter, services.layout.LayoutConfigurator) as any
    },
    validation: {
        StatemachineValidator: () => new StatemachineValidator()
    },
    layout: {
        ElkFactory: () => () => new ElkConstructor({ algorithms: ['layered'], workerUrl: '../node_modules/elkjs/lib/elk-worker.js'}),
        ElementFilter: () => new DefaultElementFilter(),
        LayoutConfigurator: () => new StatesLayoutConfigurator()
    }
};


/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 *
 * @param context Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */
export function createStatemachineServices(context: DefaultSharedModuleContext): {
    shared: LangiumSprottySharedServices,
    statemachine: StatemachineServices
} {
    const shared = inject(
        createDefaultSharedModule(context),
        StatemachineGeneratedSharedModule,
        SprottySharedModule
    );
    const statemachine = inject(
        createDefaultModule({ shared }),
        StatemachineGeneratedModule,
        StatemachineModule
    );
    shared.ServiceRegistry.register(statemachine);
    registerValidationChecks(statemachine);
    return { shared, statemachine };
}